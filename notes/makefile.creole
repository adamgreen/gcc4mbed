==Parallel Build
The GCC4MBED makefiles allow the use of the **-j** or **--jobs** makefile parameter when executing your project's makefile.  This will allow multiple processes to be utilized for building your code and its dependencies.  This will typically decrease the build time.

Example: {{{make -j 4 all}}}

==Make Rules
The GCC4MBED supports the following rules when building your project makefile:
* **all**: The main rule for building your project and all of its official mbed dependencies.
* **clean**: Will clean out all of the output files for your project.  This will cause a full rebuild when you next issue the **all** rule.
* **clean-all**: Will clean out all of the output files, those for your project and the mbed libraries.
* **LPC1768-clean**: Will clean out the LPC1768 output files for your project.
* **LPC11U24-clean**: Will clean out the LPC11U24 output files for your project.
* **KL25Z-clean**: Will clean out the KL25Z output files for your project.
* **deploy**: Deploys the LPC1768 output binary to your device.  Uses the **LPC_DEPLOY** environment variable to specify the commands for executing the copy operation.
* **LPC1768-deploy**: Same as deploy rule.
* **LPC11U24-deploy**: Deploys the LPC11U24 output binary to your device.
* **KL25Z-deploy**: Deploys the KL25Z output binary to your device.


==Make Variables
The GCC4MBED project uses various makefile variables to configure and customize the binaries being built.  This page describes these make variables.

===PROJECT
The **PROJECT** variable is used in an application's makefile to indicate the name of the project being built.  The output binaries with .elf, .bin, and .hex extensions will be given this as a name.  The application's makefile must specify a value for this variable.

===GCC4MBED_DIR
The **GCC4MBED_DIR** variable is used in an application's makefile to specify the root directory location of the GCC4MBED project.  This directory will be the directory which contains the GCC4MBED install scripts such as win_install.cmd, linux_install, and mac_install.  The application's makefile must specify a value for this variable.

===DEVICES
The **DEVICES** variable is used in an application's makefile to specify a space delimited list of target devices for which the code should be built.  The officially supported devices for this list include:
* LPC1768
* LPC11U24
* KL25Z

These devices are currently in beta:
* LPC4330_M4
* NRF51822

These devices were added by the community.  I make sure that they build during a release but I don't test on actual hardware:
* DISCO_F407VG (added by [[https://developer.mbed.org/users/svkatielee/ | Larry Littlefield]])
* NUCLEO_F401RE (added by [[https://developer.mbed.org/users/svkatielee/ | Larry Littlefield]])
* NUCLEO_F411RE (added by [[https://github.com/weyoui | weyoui]])

The default target device is LPC1768.

===SRC
The **SRC** variable is used in an application's makefile to specify the root directory of the sources for this project.  If not explicitly set by the application's makefile then it defaults to the directory in which the makefile is located.  However it can be set to a different directory name if it happens that the project's source code is found in a different directory than the makefile.

===EXCLUDE
The **EXCLUDE** variable is used in an application's makefile to specify a pattern to exclude files from **SRC** variable. This allows more flexible build without having to move directories to avoid building them. This variable is a space-separated list of patterns to exclude from build.

===MBED_LIBS
The **MBED_LIBS** variable is an optional variable that an application's makefile can use to provide a space delimited list of additional official mbed libraries to be used.  The order of the libraries in this list will matter since they dictate link order.  The supported libraries include:
* **net/eth**: Pulls in the ethernet version of the TCP/IP networking stack and its dependencies (ie. rtos).
* **rtos**: Pulls in the mbed RTOS library.
* **fs**: Pulls in the FATFileSystem and SDFileSytem drivers.
* **rpc**: Pulls in the mbed RPC library.
* **dsp**: Pulls in the CMSIS DSP library.
* **USBDevice**: Pulls in the USBDevice drivers such USBMouse, USBKeyboard, USBSerial, USBKeyboardMouse, etc.
* **USBHost**: Pulls in the USBHost drivers such as USBHostMSD, USBHostMouse, USBHostKeyboard, USBHostHub, USBHostSerial, etc.

===NO_FLOAT_SCANF
The **NO_FLOAT_SCANF** variable is an optional variable that an application's makefile can set to 1, indicating that scanf() does not need to support floating point values which reduces code size.

===NO_FLOAT_PRINTF
The **NO_FLOAT_PRINTF** variable is an optional variable that an application's makefile can set to 1, indicating that printf() does not need to support floating point values which reduces code size.

===DEFINES
The **DEFINES** variable can be used by an application's makefile to explicitly define some preprocessor macros that should be set when compiling the files for the main application.  It doesn't get used for building the mbed SDK libraries.

===INCDIRS
The **INCDIRS** variable can be used by an application's makefile to prepend a list of directories to the INCLUDE path used by the compiler for finding #included header files.  This list should be space delimited.

===LIBS_PREFIX
**LIBS_PREFIX** is an optional variable that an application's makefile can use to specify a list of libraries that should be linked into its final binary **before** it links in the mbed SDK libraries.

===LIBS_SUFFIX
**LIBS_SUFFIX** is an optional variable that an application's makefile can use to specify a list of libraries that should be linked into its final binary **after** it links in the mbed SDK libraries.

===GPFLAGS
**GPFLAGS** is an optional variable that an application's makefile can use to specify additional flags for compiling C++ source files.

===GCFLAGS
**GCFLAGS** is an optional variable that an application's makefile can use to specify additional flags for compiling C source files.

===GAFLAGS
**GAFLAGS** is an optional variable that an application's makefile can use to specify additional flags for assembling .s assembly language source files.

===VERBOSE
**VERBOSE** is an optional variable that an application's makefile can set to 1, indicating that all build tool commands should be displayed to the user.  For example this will cause the full GCC command line for each source file to be shown.

===NEWLIB_NANO
**NEWLIB_NANO** is an optional variable that an applications' makefile can set to 0, indicating that the standard newlib C library should be used instead of the smaller newlib-nano library.  The user might want to do this if they need something like printf for 64-bit integers that isn't supported by newlib-nano.

===GCC4MBED_TYPE
The **GCC4MBED_TYPE** variable is used to specify the type of build to produce.  It would typically be set as an environment variable but it can also be set in the application's makefile.  The allowed values are:
* **Debug** - Build for debugging.  Disables optimizations and links in debug MRI runtime.  Best debugging experience.
* **Release** - Build for release with no debug support and optimizations enabled.
* **Checked** - Release build with debug support.  Due to optimizations, debug experience won't be as good as Debug but might be needed when bugs don't reproduce in Debug builds.
\\The default value is Release.

===OPTIMIZATION
**OPTIMIZATION** is an optional variable that an application's makefile can use to override the default optimization level used by the compiler in Release/Checked builds (Debug builds always use an optimization level of 0).  It defaults to 2 for Checked/Release builds.

===MRI Debugging Related Variables
MRI is a library that can be linked into your application to provide debug monitoring capabilities.  This allows GDB, the GNU Debugger, to connect to your device via a serial port.  It allows for the use of breakpoints, data watchpoints, single-stepping, inspection/modification of variables, etc.

**Note:** Currently the MRI debug monitor is only support on LPC1768 targets and will automatically be disabled for other device targets.

====MRI_BREAK_ON_INIT
The **MRI_BREAK_ON_INIT** variable can be set in an application's makefile to a non-zero value to indicate that the MRI debugger should halt and wait for GDB to attach before executing the global constructors and the main() function.  This allows the developer to set breakpoints in areas of interest before the main code starts executing.  The default value for this variable is 1 for Checked and Debug builds while it defaults to 0 for Release builds.

====MRI_SEMIHOST_STDIO
The **MRI_SEMIHOST_STDIO** variable can be set in an application's makefile to a non-zero value to allow the debug monitor to use semi-host calls to redirect stdin/stdout/stderr to GDB's console.  It defaults to 1 for Debug/Checked builds and 0 for Release builds.

====MRI_UART
The **MRI_UART** is an optional variable that can be set in an application's makefile to configure the device's UART being used for communicating between GDB and MRI.  You can select any of the 4 available UARTs on the mbed device:
| MRI_UART_MBED_USB | 
| MRI_UART_MBED_P9_P10 |
| MRI_UART_MBED_P13_P14 |
| MRI_UART_MBED_P28_P27 |

It defaults to MRI_UART_MBED_USB if not explicitly set in the application's makefile.

By default the auto-baud functionality is used to allow the device to automatically detect the baud rate used by GDB when it first connects.  However it is possible to configure a fixed baud rate by appending a MRI_UART_BAUD=baudRate specifier to the MRI_UART variable string.  An example:
{{{
MRI_UART := "MRI_UART_MBED_USB MRI_UART_BAUD=115200"
}}}

====MRI_ENABLE
The **MRI_ENABLE** variable is typically configured automatically based on the setting of **GCC4MBED_TYPE**.  If you however want a non-optimized build that you can use with a JTAG debugger then you can set **GCC4MBED_TYPE** to Debug and **MRI_ENABLE** to 0.

===Example Makefile
{{{
PROJECT      := HelloWorld
GCC4MBED_DIR := ../..

include $(GCC4MBED_DIR)/build/gcc4mbed.mk
}}}
